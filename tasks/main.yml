---

- name: Check if teleport is installed.
  command: "/usr/local/bin/teleport version"
  changed_when: false
  register: teleport_version_check
  failed_when: false
  #stat:
  #  path: /usr/local/bin/teleport
  #register: teleport_bin

- name: Unarchive teleport.
  unarchive:
    src: "https://get.gravitational.com/teleport-v{{ teleport_version }}-linux-amd64-bin.tar.gz"
    dest: /tmp
    remote_src: yes
  when: "teleport_version_check.rc >= 1 or (teleport_version not in teleport_version_check.stdout)"

- name: Install teleport.
  command: >
    ./install
    chdir=/tmp/teleport
  become: yes
  when: "teleport_version_check.rc >= 1 or (teleport_version not in teleport_version_check.stdout)"

- name: Create teleport config.
  template:
    src: "teleport.yaml.j2"
    dest: "{{ teleport_config_path }}"
    owner: "root"
    group: "root"
    mode: 0600
  notify: restart teleport

- include_tasks: configure-Systemd.yml
  when: ansible_service_mgr == 'systemd'

- include_tasks: configure-Upstart.yml
  when: ansible_service_mgr == 'upstart'

- include_tasks: configure-Sysvinit.yml
  when: ansible_service_mgr == 'sysvinit'

- name: Ensure .aws directory exists
  file:
    path: "/root/.aws"
    state: directory
  when: teleport_aws_access_key_id is defined and teleport_aws_secret_access_key is defined

- name: Create aws credentials file
  template:
    src: "aws_credentials.j2"
    dest: "/root/.aws/credentials"
    owner: "root"
    group: "root"
    mode: 0600
  when: teleport_aws_access_key_id is defined and teleport_aws_secret_access_key is defined

- name: Ensure /var/lib/teleport directory exists
  file:
    path: /var/lib/teleport
    state: directory
  when: teleport_force_host_uuid is defined

- name: Force host_uuid
  copy:
    content: "{{ teleport_force_host_uuid }}"
    dest: /var/lib/teleport/host_uuid
  when: teleport_force_host_uuid is defined

- name: Check input tcp port 3025
  command: iptables -C INPUT -p tcp --dport 3025 -j ACCEPT
  register: iptables_rule_check_result
  failed_when: False
  changed_when: False
  when: teleport_auth_enabled
  tags: iptables

- name: Allows input tcp port 3025
  command: iptables -I INPUT 1 -p tcp --dport 3025 -j ACCEPT
  register: iptables_rule_insert_result
  when: teleport_auth_enabled and iptables_rule_check_result.rc != 0
  tags: iptables

- name: Ensure ipset is installed
  package:
    name: ipset
    state: present
  when: teleport_ssh_enabled
  tags: iptables

- name: Create ipset teleport_proxies
  command: ipset create teleport_proxies hash:ip
  failed_when: False
  changed_when: False
  when: teleport_ssh_enabled
  tags: iptables

- name: Check input tcp port 3022 from teleport proxy
  command: iptables -C INPUT -p tcp --dport 3022 -m set --match-set teleport_proxies  src -j ACCEPT
  register: iptables_rule_check_result
  failed_when: False
  changed_when: False
  when: teleport_ssh_enabled
  tags: iptables

- name: Allows input tcp port 3022 from teleport proxy
  command: iptables -I INPUT 1 -p tcp --dport 3022 -m set --match-set teleport_proxies  src -j ACCEPT
  register: iptables_rule_insert_result
  when: teleport_ssh_enabled and iptables_rule_check_result.rc != 0
  tags: iptables

- name: save iptables v4 rules
  shell: iptables-save > /etc/iptables/rules.v4
  when: iptables_rule_check_result.rc != 0 and iptables_rule_insert_result.rc == 0
  tags: iptables

- name: Ensure teleport has selected state and enabled on boot.
  service:
    name: 'teleport'
    #state: 'reloaded'
    state: 'restarted'
    enabled: yes
  changed_when: false
