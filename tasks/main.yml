---

- name: Check if teleport is installed.
  command: "/usr/local/bin/teleport version"
  changed_when: false
  register: teleport_version_check
  failed_when: false
  #stat:
  #  path: /usr/local/bin/teleport
  #register: teleport_bin

- name: Unarchive teleport.
  unarchive:
    src: "https://get.gravitational.com/teleport-v{{ teleport_version }}-linux-amd64-bin.tar.gz"
    dest: /tmp
    remote_src: yes
  when: "teleport_version_check.rc >= 1 or (teleport_version not in teleport_version_check.stdout)"

- name: Install teleport.
  command: >
    ./install
    chdir=/tmp/teleport
  become: yes
  when: "ansible_lsb.major_release|int != 16 and (teleport_version_check.rc >= 1 or (teleport_version not in teleport_version_check.stdout))"

- name: Install teleport (for Ubuntu 16).
  unarchive:
    src: teleport_v9.0.1_ubuntu16.tar.xz 
    dest: /usr/local/bin
  when: ansible_lsb.major_release|int == 16

- name: Create teleport config.
  template:
    src: "teleport.yaml.j2"
    dest: "{{ teleport_config_path }}"
    owner: "root"
    group: "root"
    mode: 0600
  notify: restart teleport

- name: Create teleport APPs config.
  template:
    src: "teleport_apps.yaml.j2"
    dest: "{{ teleport_apps_config_path }}"
    owner: "root"
    group: "root"
    mode: 0600
  notify: restart teleport_apps

- include_tasks: configure-Systemd.yml
  when: ansible_service_mgr == 'systemd'

- include_tasks: configure-Upstart.yml
  when: ansible_service_mgr == 'upstart'

- include_tasks: configure-Sysvinit.yml
  when: ansible_service_mgr == 'sysvinit'

- name: Ensure .aws directory exists
  file:
    path: "/root/.aws"
    state: directory
  when: teleport_aws_access_key_id is defined and teleport_aws_secret_access_key is defined

- name: Create aws credentials file
  template:
    src: "aws_credentials.j2"
    dest: "/root/.aws/credentials"
    owner: "root"
    group: "root"
    mode: 0600
  when: teleport_aws_access_key_id is defined and teleport_aws_secret_access_key is defined

- name: Ensure /var/lib/teleport directory exists
  file:
    path: /var/lib/teleport
    state: directory
  when: teleport_force_host_uuid is defined

- name: Force host_uuid
  copy:
    content: "{{ teleport_force_host_uuid }}"
    dest: /var/lib/teleport/host_uuid
  when: teleport_force_host_uuid is defined

- name: Check input tcp port 3025
  command: iptables -C INPUT -p tcp --dport 3025 -j ACCEPT
  register: iptables_3025_rule_check_result
  failed_when: False
  changed_when: False
  when: teleport_auth_enabled
  tags: iptables

- name: Allows input tcp port 3025
  command: iptables -I INPUT 1 -p tcp --dport 3025 -j ACCEPT
  when: teleport_auth_enabled and iptables_3025_rule_check_result.rc != 0
  tags: iptables

- name: Check input tcp port 3023
  command: iptables -C INPUT -p tcp --dport 3023 -j ACCEPT
  register: iptables_3023_rule_check_result
  failed_when: False
  changed_when: False
  when: teleport_ssh_public_addr != ''
  tags: iptables

- name: Allows input tcp port 3023
  command: iptables -I INPUT 1 -p tcp --dport 3023 -j ACCEPT
  when: teleport_ssh_public_addr != '' and iptables_3023_rule_check_result.rc != 0
  tags: iptables

- name: save iptables v4 rules
  shell: iptables-save > /etc/iptables/rules.v4
  tags: iptables

- name: Ensure DNS route53 let's encrypt dependencies installed
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - certbot
    - python3-certbot-dns-route53
  when: teleport_letsencrypt_domain != ''

- name: Request let's encrypt certificate
  shell: "test -f {{ teleport_proxy_https_cert_file|quote }} || certbot certonly --dns-route53 -d {{ teleport_letsencrypt_domain|quote }}"
  when: teleport_letsencrypt_domain != ''

- name: Cleanup any old teleport directory
  file:
    path: /var/lib/teleport
    state: absent
  when: teleport_ssh_enabled and not teleport_force_host_uuid is defined

- name: Ensure teleport has selected state and enabled on boot.
  service:
    name: 'teleport'
    state: 'restarted'
    enabled: yes
  changed_when: false

- name: Ensure teleport APPs has selected state and enabled on boot.
  service:
    name: 'teleport_apps'
    state: 'restarted'
    enabled: yes
  changed_when: false
